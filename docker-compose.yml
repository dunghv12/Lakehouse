# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
    # environment:
    #   - AWS_ACCESS_KEY_ID=admin
    #   - AWS_SECRET_ACCESS_KEY=password
---
version: "3"
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow-spark:2.6.2}
  # build: .
  #postgresql+psycopg2://<user>:<password>@<host>/<db>
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - ./spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
#chmod +x ./docker-postgresql-multiple-databases/create-multiple-postgresql-databases.sh
services:
  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_MULTIPLE_DATABASES: airflow,metastore_db
    ports:
      - 5432:5432
    volumes:
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - iceberg_net
  airflow-webserver:
    <<: *airflow-common
    container_name: webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - iceberg_net
  airflow-scheduler:
    <<: *airflow-common
    container_name: scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - iceberg_net
  airflow-triggerer:
    <<: *airflow-common
    container_name: triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - iceberg_net
  airflow-init:
      <<: *airflow-common
      container_name:  airflow-init
      entrypoint: /bin/bash
      # yamllint disable rule:line-length
      command:
        - -c
        - |
          function ver() {
            printf "%04d%04d%04d%04d" $${1//./ }
          }
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
          exec /entrypoint airflow version
      # yamllint enable rule:line-length
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_UPGRADE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        _PIP_ADDITIONAL_REQUIREMENTS: ''
      user: "0:0"
      volumes:
        - ${AIRFLOW_PROJ_DIR:-.}:/sources
      networks:
        - iceberg_net

  spark-master:
    container_name: master
    image: lakehouse/spark-iceberg:3.4.1
    entrypoint: ['./entrypoint.sh', 'master']
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 5s
      timeout: 3s
      retries: 3
    depends_on:
      - minio
    volumes:
      - ./conf/log4j2.properties:/opt/spark/conf/log4j2.properties
      - ./spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - /Users/hoangdung/Documents/Study/Scala/Test2/untitled/target/scala-2.12/untitled_2.12-0.1.0-SNAPSHOT.jar:/Users/hoangdung/Documents/Study/Scala/Test2/untitled/target/scala-2.12/untitled_2.12-0.1.0-SNAPSHOT.jar
      - ./plugins/scripts/project_Hive_Spark/untitled_2.12-0.1.0-SNAPSHOT.jar:/opt/airflow/plugins/scripts/project_Hive_Spark/untitled_2.12-0.1.0-SNAPSHOT.jar
    env_file:
      - .env.spark
    ports:
      - 10000:10000
      - 10001:10001
      - 8888:8888
      - 9080:8080
      - 7077:7077
      - 6066:6066
    networks:
      iceberg_net:
  spark-worker-a:
    container_name: worker-a
    image: lakehouse/spark-iceberg:3.4.1
    entrypoint: ['./entrypoint.sh', 'worker']
    depends_on:
      - spark-master
    env_file:
      - .env.spark
    volumes:
      - ./conf/log4j2.properties:/opt/spark/conf/log4j2.properties
      - ./spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - /Users/hoangdung/Documents/Study/Scala/Test2/untitled/target/scala-2.12/untitled_2.12-0.1.0-SNAPSHOT.jar:/Users/hoangdung/Documents/Study/Scala/Test2/untitled/target/scala-2.12/untitled_2.12-0.1.0-SNAPSHOT.jar
      - ./plugins/scripts/project_Hive_Spark/untitled_2.12-0.1.0-SNAPSHOT.jar:/opt/airflow/plugins/scripts/project_Hive_Spark/untitled_2.12-0.1.0-SNAPSHOT.jar
    ports:
      - 9081:8081
      - 7001:7000
    environment:
      - SPARK_WORKER_CORES=3
      - SPARK_WORKER_MEMORY=1G
    networks:
      iceberg_net:
  spark-worker-b:
    container_name: worker-b
    image: lakehouse/spark-iceberg:3.4.1
    entrypoint: ['./entrypoint.sh', 'worker']
    depends_on:
      - spark-master
    env_file:
      - .env.spark
    volumes:
      - ./conf/log4j2.properties:/opt/spark/conf/log4j2.properties
      - ./spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - /Users/hoangdung/Documents/Study/Scala/Test2/untitled/target/scala-2.12/untitled_2.12-0.1.0-SNAPSHOT.jar:/Users/hoangdung/Documents/Study/Scala/Test2/untitled/target/scala-2.12/untitled_2.12-0.1.0-SNAPSHOT.jar
      - ./plugins/scripts/project_Hive_Spark/untitled_2.12-0.1.0-SNAPSHOT.jar:/opt/airflow/plugins/scripts/project_Hive_Spark/untitled_2.12-0.1.0-SNAPSHOT.jar
    environment:
      - SPARK_WORKER_CORES=3
      - SPARK_WORKER_MEMORY=1G
    ports:
      - 9082:8081
      - 7002:7000
    networks:
      iceberg_net:
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      -  minio-data:/data
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  hive-metastore:
    hostname: hive-metastore
    image: 'hive-metastore:3.2.0'
    container_name: hive
    ports:
      - 9083:9083 # Metastore Thrift
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      - METASTORE_DB_HOSTNAME=postgres
      - METASTORE_TYPE=postgres
    command: "--METASTORE_TYPE postgres"
    depends_on:
      - postgres
    networks:
      - iceberg_net
  trino:
    hostname: trino
    image: 'trinodb/trino:417'
    container_name: trino
    ports:
      - '8090:8080'
    volumes:
      - ./etc:/etc/trino
    networks:
      - iceberg_net
  # mc:
  #   depends_on:
  #     - minio
  #   image: minio/mc
  #   container_name: mc
  #   networks:
  #     iceberg_net:
  #   environment:
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #   entrypoint: >
  #     /bin/sh -c "
  #     until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
  #     /usr/bin/mc rm -r --force minio/warehouse;
  #     /usr/bin/mc mb minio/warehouse;
  #     /usr/bin/mc policy set public minio/warehouse;
  #     tail -f /dev/null
  #     "
networks:
  iceberg_net:
volumes:
  mariadb-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
      # - AWS_REGION=us-east-1

  # spark-iceberg:
  #   image: tabulario/spark-iceberg:3.4.1
  #   container_name: spark-iceberg
  #   networks:
  #     iceberg_net:
  #   volumes:
  #     - ./spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
  #   depends_on:
  #     - minio
  #   ports:
  #     - 8888:8888
  #     - 8080:8080
  #     - 10000:10000
  #     - 10001:10001